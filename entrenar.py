# -*- coding: utf-8 -*-
"""entrenar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hVVcRafQDH0xCZMoabn8MHOI9YGr4_zl
"""

import numpy as np
import pandas as pd

from sklearn.linear_model import Ridge

from sklearn.metrics import mean_squared_error , mean_absolute_error
from sklearn.model_selection import cross_val_score, cross_val_predict , KFold,GridSearchCV

from sklearn.pipeline import Pipeline
from sklearn.compose import TransformedTargetRegressor

from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler, OneHotEncoder

import joblib
import matplotlib.pyplot as plt

df_casas = pd.read_csv('limpio.csv')
df_casas.head(125)

def_casa_num = pd.get_dummies(df_casas, columns=['zona'])

def_casa_num.head(125)

x,y = def_casa_num.drop(['precio','ventaoalquiler','ciudad_casa','ubicacion','unidadterreno','descripespecif'], axis=1), def_casa_num['precio']

vars_casas = ['ciudad_casa', 'ubicacion', 'ventaoalquiler', 'descripespecif', 'metrajeconstruc', 'metrajeterreno', 'precio', 'unidadterreno', 'seguridad', 'piscina', 'zona_Gquil - Samborondón', 'zona_Gquil - Sur', 'zona_OTRAS ZONAS / COSTA & GALAP.', 'zona_Otras Zonas / Costa & Galap.', 'zona_Otras Zonas / Sierra & Oriente', 'zona_PENíNSULA & RUTA DEL SOL', 'zona_Península & Ruta del Sol', 'zona_Quito - Centro&Sur', 'zona_Quito - Norte', 'zona_Quito - Periférico']

vars_casas = list(def_casa_num.columns)
vars_casas.remove('precio')
print(vars_casas)

lr_m = Ridge()
lr_m.fit(x,y)
print ("model intercept" % lr_m.intercept_)
plt.xticks(range(len(vars_casas)), vars_casas, rotation=45)
plt.title('regresion lineal modelo')
_ = plt.plot(lr_m.coef_.T, '-',lr_m.coef_.T, 'r*')

print(x.columns)

y_pred = lr_m.predict(x)
print('MAE: %.3f' % mean_absolute_error(y, y_pred))
plt.xlabel('prediccion')
plt.ylabel('real')
_ = plt.plot(y_pred, y, '.')

from sklearn  import model_selection

n_folds = 10
kf = KFold(n_folds,shuffle = True)

scores = cross_val_score(lr_m, x, y, scoring='neg_mean_absolute_error', cv=kf,n_jobs=-1)

print ('mean absolute error: %.3f' %(-1.0 * scores.mean()))
print ('std: %.3f' % scores.std())
print ('scores: ', scores)

"""Consigo menos errores y veo la tendendencia de los errores"""

n_folds = 10
kf = KFold(n_folds,shuffle = True)

l_alpha = [2.**k for k in range(-6,10)]
param_grid = {'alpha': l_alpha}

lr_m = Ridge()
ridge_alpa_Search = GridSearchCV(lr_m, param_grid, scoring='neg_mean_absolute_error', cv=kf,n_jobs=-1)
_ = ridge_alpa_Search.fit(x, y)

print ("alpha_range %s" % l_alpha)
print ("best alpha %s" % ridge_alpa_Search.best_params_)
print ("best score %s" % ridge_alpa_Search.best_score_)


plt.xticks(range(len(l_alpha)), l_alpha, rotation=45)
_ = plt.plot(-ridge_alpa_Search.cv_results_['mean_test_score'])

kf = KFold(n_folds,shuffle = True)
l_alpha = [16.*2.**(k/2.) for k in range(-6,10)]
param_grid = {'alpha': l_alpha}

lr_m = Ridge()
ridge_alpa_Search = GridSearchCV(lr_m, param_grid, scoring='neg_mean_absolute_error', cv=kf, n_jobs=-2, verbose=1)
_ = ridge_alpa_Search.fit(x, y)

plt.xticks(range(len(l_alpha)), l_alpha, rotation=45)
_ = plt.plot(-ridge_alpa_Search.cv_results_['mean_test_score'])

best_alpha = ridge_alpa_Search.best_params_['alpha']
lr_m=Ridge(alpha=best_alpha)

scores = cross_val_score(lr_m, x, y, scoring='neg_mean_absolute_error', cv=kf,n_jobs=2)

print ('mean absolute error: %.3f' %(-1.0 * scores.mean()))

y_pred = cross_val_predict(lr_m, x, y)

plt.figure(figsize=(10,10))

plt.xlabel('predicted')
plt.ylabel('real')

_ = plt.plot(y_pred, y, '.',y, y, '-')

df_casas.reset_index(drop=True, inplace=True)
df_casas_pred = df_casas.copy()
df_casas_pred.head(125)

df_casas_pred['precio_pred'] = y_pred
df_casas_pred.head(100)

lr_m.fit(x,y)

print(vars_casas)

vars_casas = ['metrajeconstruc', 'metrajeterreno', 'seguridad', 'piscina', 'terraza',
       'baños', 'parqueo', 'financiamiento', 'zon_comercial',
       'zona_gquil - ceibos & vía a la costa', 'zona_gquil - centro',
       'zona_gquil - norte', 'zona_gquil - samborondón', 'zona_gquil - sur',
       'zona_otras zonas / costa & galap.',
       'zona_otras zonas / sierra & oriente', 'zona_península & ruta del sol',
       'zona_quito - centro&sur', 'zona_quito - norte',
       'zona_quito - periférico']

pd.DataFrame(lr_m.coef_, vars_casas, columns=['coef']).sort_values(by='coef', ascending=False)

import seaborn as sns

sns.pairplot(df_casas_pred, vars=['precio', 'precio_pred'], kind='reg')

df_casas_pred['precio'] = np.log10(df_casas_pred['precio'])
df_casas_pred['precio_pred'] = np.log10(df_casas_pred['precio_pred'])
sns.pairplot(df_casas_pred, vars=['precio', 'precio_pred'], kind='reg')

df_casas_pred.info()